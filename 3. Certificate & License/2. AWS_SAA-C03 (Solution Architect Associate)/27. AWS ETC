
Deploying and Managing Infrastructure at Scale Section

1. CloudFormation
    CloudFormation is a declarative way of outlining your AWS Infrastructure, for any resources (most of them are supported)
    For example, within a CloudFormation template, you say :
        I want a security group 
        I want two EC2 instances using this security group 
        I want an S3 bucket 
        I want a load balancer (ELB) in front of these machines 
    Then CloudFormation creates those for you, in the "right order", with the "exact configuration" that you specify 

    Benefits of AWS CloudFormation
        Infrastructure as code 
            No resources are manually created, which is excellent for control 
            Changes to the infrastructure are reviewed through code 
        Cost 
            Each resources within the stack is tagged with an identifier so you can easily see how much a stack costs you 
            You can estimate the costs of your resources using the CloudFormation template 
            Savings strategy : In Dev, you could automation deletion of templates at 5 PM and recreated at 8 AM, safely
        Productivity
            Ability to destroy and re-create an infrastructure on the cloud on the fly 
            Automated generation of Diagram for your templates 
            Declarative programming (no need to figure out ordering and orchestration)
        Don't re-invent the wheel 
            Leverage existing templates on the web 
            Leverage the documentation
        Supports (almost) all AWS resources :
            Everything we'll see in this course is supported 
            You can use "custom resources" for resources that are not supported 

    CloudFormation Stack Designer 
        Example : WordPress CloudFormation Stack 
        We can see all the resources 
        We can see the relations between the components

    CloudFormation - Service Role 
        IAM role that allows CloudFormation to create/update/delete stack resources on your behalf 
        Give ability to users to create/update/delete the stack resources event if they don't have permissions to work with the resources in the stack 
        Use cases :
            You want to achieve the least privilege principle
            But you don't want to give the user all the required permissions to create the stack resources 
        User must have iam:PassRole permissions 


2. Amazon SES 
    Amazon Simple Email Service (Amazon SES)
        "Fully managed service to send emails securely, globally and at scale"
        Allows inbound/outbound emails 
        Reputation dashboard, performance insights, anti-spam feedback 
        Provides statistics such as email deliveries, bounces, feedback loop results, email open 
        Supports DomainKeys Identified Mail (DKIM) and Sender Policy Framework (SPF)
        Flexible IP deployment : shared, dedicated, and customer-owned IPs 
        Send emails using your application using AWS Console, APIs, or SMTP 
        Use caes : transactional, marketing and bulk email communications


3. Amazon Pinpoint
    Scalable "2-way (outbound/inbound)" marketing communications service 
    Supports email, SMS, push, voice, and in-app messaging 
    Ability to segment and personalize messages with the right content to customers 
    Possibility to receive replies 
    Scales to billions of messages per day 
    Use cases : run campaigns by sending marketing, bulk, transactional SMS messages 
    "Versus Amazon SNS or Amazon SES"
        In SNS & SES you managed each message's audience, content, and delivery schedule 
        In Amazon Pinpoint, you create message templates, delivery schedules, highly-targeted segments, and full campaigns 


4. Systems Manager
    Systems Manager - SSM Session Manager 
        Allows you to start a secure shell on your EC2 and on-premises servers 
        "No SSH access, bastion hosts, or SSH keys needed"
        "No port 22 needed (better security)"
        Supports Linux, macOS, and Windows 
        Send session log data to S3 or CloudWatch Logs 
        User  --IAM Permissions-->  Session Manager  --Execute commands-->  EC2 Instance (SSM Agent)

    Systems Manager - Run Command 
        Execute a document (= script) or just run a command 
        Run command across multiple instances (using resource groups)
        No need for SSH 
        Command Output can be shown in the AWS Console, sent to S3 bucket or CloudWatch Logs 
        Send notifications to SNS about command status (In progress, Success, Failed, ...)
        Integrated with IAM & CloudTrail 
        Can be invoked using EventBridge

    Systems Manager - Patch Manager 
        Automates the process of patching managed instances 
        OS updates, application updates, security updates 
        Supports EC2 instances and on-premises servers 
        Supports Linux, macOS, and Windows 
        Patch on-demand or on a schedule using "Maintenance Windows"
        Scan instances and generate patch compliance report (missing patches)

    Systems Manager - Maintenance Windows 
        Defines a schedule for when to perform actions on your instances 
        Example : OS patching, updating drivers, installing software, ...
        Maintenance Window contains 
            Schedule
            Duration
            Set of registered instances
            Set of registered tasks 

    Systems Manager - Automation 
        Simplifies common maintenance and deployment tasks of EC2 instances and other AWS resources 
        Examples : restart instances, create an AMI, EBS snapshot
        "Automation Runbook" - SSM Documents to define actions preformed on your EC2 instances or AWS resources (pre-defined or custom)
        Can be triggered using :
            Manually using AWS Console, AWS CLI or SDK 
            Amazon EventBridge
            On a schedule using Maintenance Windows 
            By AWS Config for rules remediations 

    
5. Cost Explorer 
    Visualize, understand, and manage your AWS costs and usage over time 
    Create custom reports that analyze cost and usage data 
    Analyze your data at a high level : total costs and usage across all accounts 
    Or Monthly, hourly, resource level granularity 
    Choose an optimal "Saving Plan" (to lower prices on your bill)
    "Forecast usage up to 12 months based on previous usage"


6. AWS Batch 
    "Fully managed" batch processing at "any scale"
    Efficiently run 100,000s of computing batch jobs on AWS 
    A "batch" job is a job with a start and an end (opposed to continuous)
    Batch will dynamically launch "EC2 instances" or "Spot Instances"
    AWS Batch provisions the right amount of compute/memory 
    You submit or schedule batch jobs and AWS Batch does the rest 
    Batch jobs are defined as "Docker images" and "run on ECS"
    Helpful for cost optimizations and focusing less on the infrastructure

    Batch  vs  Lambda 
        Lambda 
            Time limit (15 minutes)
            Limited runtimes 
            Limited temporary disk space 
            Serverless 
        Batch 
            No time limit 
            Any runtime as long as it's packaged as a Docker image 
            Rely on EBS / instance store for disk space 
            Relies on EC2 (can be managed by AWS)


7. Amazon AppFlow 
    Fully managed integraiton service that enables you to securely transfer data between "Software-as-a-Service (SaaS) applications and AWS"
    Sources : "Salesforce", SAP, Zendesk, Slack and ServiceNow 
    Destinations : AWS Services like "Amazon S3, Amazon Redshift" or non-AWS such as SnowFlake and Salesforce 
    Frequency : on a schedule, in response to events, or on demand 
    Data transformation capabilities like filtering and validation 
    Encrypted over the public internet or privately over AWS PrivateLink 
    Don't spend time writing the integrations and leverage APIs immediately


8. AWS Amplify - web and mobile applications 
    A set of tools and services that helps you develop and deploy scalable full stack web and mobile applications 
    Authentication, Storage, API (REST, GraphQL), CI/CD, PubSub, Analytics, AI/ML Predictions, Monitoring, ...
    Connect your source code from GitHub, AWS CodeCommit, Bitbucket, GitLab, or upload directly

    User --configure backend using Amplify CLI-->                           Amplify backend (Amazon S3, Amazon Cognito, AWS AppSync, API Gateway, ...)
         --connect frontend to backend using Amplify Frontend Libraries-->  Frontend (iOS, Android, React, ...)
         --build using Amplify Console & deploy-->                          Amplify Console, Amazon CloudFront 


