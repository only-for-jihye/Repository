3티어(3-tier) 애플리케이션 아키텍처는 소프트웨어 디자인 패턴 중 하나로, 애플리케이션을 세 가지 주요 계층으로 나누어 구성합니다. 각각의 계층은 독립적으로 작동하며, 특정한 역할을 담당합니다. 이 아키텍처는 확장성, 유지 보수성, 보안성 등의 장점을 제공합니다. 3티어 아키텍처는 다음과 같은 세 가지 계층으로 구성됩니다:

프레젠테이션 계층(Presentation Layer):

사용자 인터페이스(UI)를 담당합니다.
사용자와 애플리케이션 간의 상호작용을 처리합니다.
웹 브라우저나 데스크톱 애플리케이션에서 동작하며, HTML, CSS, JavaScript 등과 같은 기술을 사용합니다.
사용자가 입력한 데이터를 수집하여 비즈니스 계층으로 전달하고, 비즈니스 계층으로부터 받은 데이터를 사용자에게 표시합니다.
비즈니스 로직 계층(Business Logic Layer):

애플리케이션의 핵심 기능과 로직을 담당합니다.
데이터 처리, 계산, 결정 로직 등의 비즈니스 규칙을 구현합니다.
프레젠테이션 계층으로부터 데이터를 받아 처리하고, 데이터 액세스 계층과 상호작용하여 필요한 데이터를 가져옵니다.
서버에서 동작하며, Java, C#, Python 등의 프로그래밍 언어로 구현됩니다.
데이터 액세스 계층(Data Access Layer):

데이터베이스와 상호작용하여 데이터를 저장, 검색, 업데이트, 삭제하는 역할을 합니다.
데이터베이스 관리 시스템(DBMS)과 연결되어 SQL 쿼리 등을 사용하여 데이터 작업을 수행합니다.
비즈니스 로직 계층에서 요청한 데이터를 제공하며, 데이터의 일관성과 무결성을 유지합니다.
3티어 아키텍처의 장점
모듈화 및 유지 보수성: 각 계층이 독립적으로 동작하기 때문에, 특정 계층의 변경이 다른 계층에 미치는 영향을 최소화할 수 있습니다.
확장성: 각 계층을 독립적으로 확장할 수 있어 시스템의 성능을 높일 수 있습니다. 예를 들어, 프레젠테이션 계층에 더 많은 웹 서버를 추가하거나, 데이터베이스 서버를 클러스터링하여 확장할 수 있습니다.
재사용성: 비즈니스 로직 계층의 로직은 여러 프레젠테이션 계층에서 재사용할 수 있습니다. 예를 들어, 웹 애플리케이션과 모바일 애플리케이션이 동일한 비즈니스 로직을 공유할 수 있습니다.
보안성: 데이터베이스에 직접 접근하는 것을 막고, 비즈니스 로직 계층을 통해서만 접근하도록 함으로써 데이터베이스 보안을 강화할 수 있습니다.
예시
프레젠테이션 계층: HTML, CSS, JavaScript로 작성된 웹 페이지 또는 React, Angular 등의 프레임워크로 작성된 프론트엔드 애플리케이션.
비즈니스 로직 계층: Java Spring, .NET, Node.js 등으로 작성된 서버 사이드 애플리케이션.
데이터 액세스 계층: MySQL, PostgreSQL, MongoDB 등과 같은 데이터베이스 관리 시스템(DBMS).
3티어 아키텍처는 전통적인 애플리케이션 구조 중 하나로, 다양한 유형의 애플리케이션에서 널리 사용되고 있습니다. 이러한 구조를 통해 시스템의 복잡성을 효과적으로 관리하고, 향후의 변경이나 확장에 유연하게 대응할 수 있습니다.