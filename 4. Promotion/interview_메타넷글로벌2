면접 준비

분석, 설계는 높은 이해도를 필요로 함


내가 진행한 모든 개발 방법은 워터폴 모델에 속함
한 단계가 진행되지 않으면 다음 단계로 넘어갈 수 없음

폭포수 모델의 특징:
* 순차적 접근: 각 단계가 순차적으로 진행되며, 이전 단계가 완료되어야 다음 단계로 넘어갈 수 있습니다.
* 명확한 단계 구분: 각 단계의 결과물이 명확하게 정의되어 있습니다.
* 요구사항의 안정성: 초기 단계에서 요구사항이 명확하게 정의되고 이후 변경이 최소화됩니다.
장점:
* 명확한 구조: 각 단계가 명확하게 구분되어 있어 프로젝트 관리가 용이합니다.
* 명확한 문서화: 각 단계의 결과물이 문서화되므로 시스템 유지보수가 용이합니다.
* 예측 가능성: 프로젝트 진행 상황을 예측하고 관리하기 쉽습니다.
단점:
* 변경에 대한 유연성 부족: 요구사항이 변경될 경우 수정이 어렵고 비용이 많이 들 수 있습니다.
* 후반부 문제 발견: 문제나 오류가 프로젝트 후반부에 발견되면 수정하기 어려울 수 있습니다.
* 고객 피드백 부족: 초기 요구사항 정의 이후 고객의 피드백을 반영하기 어렵습니다.



"클라우드 네이티브"란 클라우드 컴퓨팅의 이점을 최대한 활용할 수 있도록 애플리케이션을 설계하고 운영하는 접근 방식을 의미합니다. 클라우드 네이티브 접근 방식은 다음과 같은 특징을 포함합니다:
1. 컨테이너화 (Containerization): 애플리케이션과 그 종속성을 패키징하여 일관된 실행 환경을 제공합니다. 대표적인 도구로는 Docker가 있습니다.
2. 마이크로서비스 아키텍처 (Microservices Architecture): 애플리케이션을 작은, 독립적으로 배포 가능한 서비스로 분리하여 관리 및 확장성을 개선합니다. 각 서비스는 고유의 기능을 담당하며, 독립적으로 배포되고 확장될 수 있습니다.
3. 동적 오케스트레이션 (Dynamic Orchestration): 컨테이너화된 애플리케이션을 자동으로 배포, 관리 및 확장하는 기능을 제공합니다. Kubernetes가 대표적인 오케스트레이션 도구입니다.
4. 데브옵스 (DevOps)와 지속적 통합/지속적 배포 (CI/CD): 개발과 운영의 경계를 허물고 협업을 강화하며, 코드를 지속적으로 통합하고 배포할 수 있는 파이프라인을 구축합니다. 이를 통해 빠르고 안정적인 릴리즈 사이클을 유지합니다.
5. 인프라스트럭처 자동화 (Infrastructure as Code, IaC): 인프라를 코드로 관리하여 버전 관리를 통해 인프라를 선언적 방식으로 프로비저닝하고 관리합니다. Terraform, Ansible 등이 IaC 도구로 사용됩니다.
6. 탄력성 (Resilience): 애플리케이션이 장애 상황에서도 지속적으로 운영될 수 있도록 설계합니다. 자동 복구, 분산 시스템, 무중단 배포 등의 기술을 활용합니다.
이러한 요소들은 클라우드 환경에서 애플리케이션의 효율성, 확장성, 신뢰성을 극대화하도록 돕습니다. 클라우드 네이티브 애플리케이션은 클라우드의 장점을 극대화하고, 빠르게 변화하는 비즈니스 요구사항에 민첩하게 대응할 수 있도록 설계됩니다.



애자일(Agile) 방법론은 소프트웨어 개발에 있어서 유연하고 반복적인 접근 방식을 강조하는 방법론입니다. 애자일은 고객의 요구와 환경 변화에 신속하게 대응하기 위해 작은 단위의 작업을 반복적으로 수행하면서, 각 단계마다 고객의 피드백을 반영하고 개선하는 것을 목표로 합니다. 애자일 방법론의 주요 특징과 구성 요소는 다음과 같습니다:
주요 특징:
1. 반복적이고 점진적인 개발:
    * 큰 프로젝트를 작은 기능 단위(스프린트)로 나누어 반복적으로 개발합니다.
    * 각 스프린트는 일반적으로 1주에서 4주 정도의 짧은 기간 동안 진행됩니다.
2. 고객과의 긴밀한 협력:
    * 고객과 지속적으로 소통하며 요구사항을 명확히 하고, 개발 과정 중에 고객의 피드백을 반영합니다.
    * 제품 소유자(Product Owner)가 고객의 대표로서 팀과 협력합니다.
3. 변화에 대한 유연한 대응:
    * 초기 계획에 얽매이지 않고, 요구사항 변경에 유연하게 대응합니다.
    * 스프린트마다 우선순위를 재조정하고 계획을 수정할 수 있습니다.
4. 자율적인 팀:
    * 개발 팀은 자율적으로 작업을 계획하고 수행합니다.
    * 팀 내의 협업과 커뮤니케이션을 중시합니다.
5. 지속적인 개선:
    * 각 스프린트가 끝난 후 회고(Retrospective) 회의를 통해 팀의 작업 방식을 평가하고 개선합니다.
애자일의 핵심 원칙 (애자일 선언문):
1. 개인과 상호작용이 프로세스와 도구보다 우선이다.
2. 작동하는 소프트웨어가 포괄적인 문서보다 우선이다.
3. 고객과의 협력이 계약 협상보다 우선이다.
4. 변화에 대응하는 것이 계획을 따르는 것보다 우선이다.
애자일 방법론의 대표적인 프레임워크:
1. 스크럼(Scrum):
    * 제품 소유자(Product Owner), 스크럼 마스터(Scrum Master), 개발 팀으로 구성됩니다.
    * 스프린트(1~4주) 동안 제품 백로그(Product Backlog)에 있는 작업을 스프린트 백로그(Sprint Backlog)로 옮겨 진행합니다.
    * 매일 진행하는 데일리 스크럼 회의를 통해 진행 상황을 공유합니다.
    * 스프린트 종료 시 데모(제품 시연)와 회고 회의를 진행합니다.
2. 칸반(Kanban):
    * 시각적인 보드(Kanban Board)를 사용해 작업의 흐름을 관리합니다.
    * 작업 항목을 다양한 단계(예: 할 일, 진행 중, 완료)로 나누어 관리합니다.
    * 작업의 진행 상황을 지속적으로 모니터링하고 병목 현상을 제거합니다.
3. 익스트림 프로그래밍(XP, Extreme Programming):
    * 고객 중심의 개발을 지향하며, 지속적인 테스트와 리팩토링을 강조합니다.
    * 페어 프로그래밍, 테스트 주도 개발(TDD), 지속적 통합(CI) 등의 실천 방식을 포함합니다.
애자일의 장점:
* 고객 만족도 향상: 지속적인 피드백을 반영하여 고객의 요구를 충족시킵니다.
* 리스크 감소: 짧은 스프린트 단위로 개발하여 문제를 조기에 발견하고 수정할 수 있습니다.
* 유연성: 요구사항 변경에 신속하게 대응할 수 있습니다.
* 팀의 동기 부여: 자율적인 팀 환경에서 높은 참여도와 책임감을 가집니다.
애자일의 단점:
* 초기 계획 부족: 전체 프로젝트 계획이 부족할 수 있습니다.
* 팀 의존성: 팀의 협업 능력에 크게 의존합니다.
* 스케일링 문제: 대규모 프로젝트에서는 관리가 어려울 수 있습니다.
애자일 방법론은 변화에 유연하게 대응하며, 지속적인 개선을 통해 더 나은 소프트웨어를 개발하고자 하는 접근 방식을 강조합니다.
