
1. Mobile application : MyToDoList
    We want to create a mobile application with the following requirements 
    Expose as REST API with HTTPS 
    Serverless architecture 
    Users should be able to directly interact with their own folder in S3 
    Users should authenticate through a managed serverless service 
    The users can write and read to-dos, but they mostly read them 
    The database should scale, and have some high read throughput

    REST API layer 
        Mobile client  <--REST HTTPS-->  Amazon API Gateway  <--invoke-->  AWS Labmda  <--query-->  Amazon DynamoDB 
                    <--authenticate-->  Amazon Cognito  <--Verify authentication-->  Amazon API Gateway 
    
    giving users access to S3 
        Mobile client  <--authenticate-->  Amazon Cognito  <--Generate temp-->  Amazon STS
                                                              credentials
                        <--Store/retrieve files-->  Amazon S3 
                            Permissions 
        * AWS 사용자 자격증명을 모바일 클라이언트에 저장한다 (X)
        -> Amazon Cognito와 STS를 임시 자격 증명에 사용해야 한다 (O)

    high read throughput, static data 
        caching 
            1. AWS Lambda  <--Query / read-->  "DAX Caching layer"  -> DynamoDB 
            2. Amazon API Gateway에서 Caching of responses

    In this lecture 
        Serverless REST API : HTTPS, API Gateway, Lambda, DynamoDB 
        Using Cognito to generate temporary credentials with STS to access S3 bucket with restricted policy. 
            App users can directly access AWS resources this way. Pattern can be applied to DynamoDB, Lambda, ...
        Caching the reads on DynamoDB using DAX 
        Caching the REST requests at the API Gateway level 
        Security for authentication and authorization with Cognito, STS 


2. Serverless hosted website : MyBlog.com 
    This website should scale globally 
    Blogs are rarely written, but often read 
    Some of the website is purely static files, the rest is a dynamic REST API 
    Caching must be implement where possible 
    Any new users that subscribes should receive a welcome email 
    Any photo uploaded to the blog should have a thumbnail generated 

    Serving static content, globally 
        Client  <--Interaction with edge locations-->  Amazon CloudFront Global distribution  <->  Amazon S3 
    
    Serving static content, globally, securely 
        Amazon CloudFront Global distribution  <--OAC : Origin Access Control-->  Amazon S3 (Bucket policy : Only authorize from CloudFront Distribution)

    Adding a public serverless REST API 
        Client  <--REST HTTPS-->  Amazon API Gateway  <--invoke-->  AWS Lambda <--Query / read-->  DAX (Caching layer)  ->  DynamoDB 
    
    Leveraging DynamoDB Global Tables 
        Client  <--REST HTTPS-->  Amazon API Gateway  <--invoke-->  AWS Lambda <--Query / read-->  DAX (Caching layer)  ->  DynamoDB (Global Tables)
    
    User Welcome email flow 
        DAX (Caching layer)  ->  DynamoDB  --Stream Change-->  DynamoDB Stream  --Invoke lambda-->  AWS Lambda (IAM Role)  --SDK to send email-->  Amazon SES (Simple Email Service)

    Thumbnail Generation Flow 
        Client  ->  Amazon S3  --trigger-->  AWS Lambda  --thumbnail-->  Amazon S3  --optional--> SQS, SNS 
                              <--OAI-->  Amazon CloudFront Global distribution  <--Upload photos Transfer acceleration--> Client
    
    AWS Hosted Website Summary
        We've seen static content being distributed using CloudFront with S3 
        The REST API was serverless, didn't need Cognito beacuse public 
        We leveraged a Global DynamoDB table to serve the data globally (We could have used Aurora Global Database)
        We enabled DynamoDB streams to trigger a Lambda function 
        The lambda function had an IAM role which could use SES 
        SES (Simple Email Service) was used to send emails in a serverless way 
        S3 can trigger SQS / SNS / Lambda to notify of events 
    

3. Micro Services architecture
    We want to switch to a micro service architecture
    Many services interact with each other directly using a REST API
    Each architecture for each micro service may vary in form and shape 
    We want a micro-service architecture so we can have a leaner development lifecycle for each service 

    Micro Services Environment
        Users  --DNS Query-->  Amazon Route 53 
               --HTTPS-->  Elastic Load Balancing  <->  ECS  <->  DynamoDB    service1.example.com 
                           Amazon API Gateway  <->  AWS lambda  <-> ElastiCache  service2.example.com 
                           Elastic Load Balacning  <->  Amazon EC2 Auto Scaling  <->  Amazon RDS    service3.example.com 

                           service2.example.com - AWS Lambda  --->  service1.example.com - ELB 
                           service3.example.com - Amazon EC2 Auto Scaling  --->  service2.exmaple.com - Amazon API Gateway 

    Discussion on Micro Services 
        You are free to design each micro-service the way you want 
        Synchronous patterns : API Gateway, Load Balancer 
        Asynchronous patterns : SQS, Kinesis, SNS, Lambda triggers (S3)
        Challenges with micro-services :
            repeated overhead for creating each new microservice,
            issues with optimizing server density/utilization 
            complexity of running multiple versions of multiple microservices simultaneously 
            proliferation of client-side code requirements to integrate with many separate services 
        Some of the challenges are solved by Serverless patterns :
            API Gateway, Lambda scale automatically and you pay per usage 
            You can easily clone API, reproduce environments
            Generated client SDK through Swagger integration for the API Gateway 


4. Software updates offloading 
    We have an application running on EC2, that distributes software updates once in a while 
    When a new software update is out, we get a lot of request and the content is distributed in mass over the network. It's very costly 
    We don't want to change our application, but want to optimize our cost and CPU, how can we do it ?

    Our application current state 
        Users (Client)  ->  Availability zone 1 to 3  ->  Auto Scaling Group  ->  Amazon Elastic File System 
                                                          AZ 1, 2, 3

    Easy way to fix things
        Users (Client)  ->  "CloudFront"  ->  Availability zone 1 to 3  ->  Auto Scaling Group  ->  Amazon Elastic File System 
                                                                          AZ 1, 2, 3

    Why CloudFront ?
        No changes to architecture
        Will cache software update files at the edge 
        Software update files are not dynamic, they're static (never changing)
        Our EC2 instances aren't serverless 
        But CloudFront is, and will scale for us 
        Our ASG will not scale as much, and we'll save tremendously in EC2 
        We'll also save in availability, network bandwidth cost, etc 
        Easy way to make an existing application more scalable and cheaper

        
