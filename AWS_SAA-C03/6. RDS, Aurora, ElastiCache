
1. Amazon RDS Overview 
    RDS stands for Relational Database Service 
    It's a managed DB service for DB use SQL as a query language
    It allows you to create databases in the cloud that are managed by AWS 
        * Postgre
        * MySQL
        * MariaDB
        * Oracle
        * Microsoft SQL Server 
        Aurora (AWS Proprietary databse)


2. Advantage over using RDS versus deploying DB on EC2 
    RDS is a managed service :
        Automated provisioning OS patching 
        Continuous backups and restore to specific timestamp (Point in Time Restore)!
        Monitoring dashboards 
        Read replicas for improved read performance 
        Multi AZ setup for DR (Disaster Recovery)
        Maintenance windows for upgrades
        Scaling capability (vertical and horizontal)
        Stroage backed by EBS (gp2 or io1)
    But you can't SSH into your instances 


3. RDS - Stroage Auto Scaling 
    Helps you increase stroage on your RDS DB instance dynamically
    When RDS detects you are running out of free database stroage, it scales automatically
    Avoid manually scaling your database stroage 
    You have to set Maximum Storage Threshold (maximum limit for DB stroage)
    Automatically modify stroage if :
        Free stroage is less than 10% of allocated storage 
        Low-storage lasts at least 5 minutes 
        6 hours have passed since last modification 
    Useful for applications with unpredictable workloads 
    Supports all RDS database engines (MariaDB, MySQL, PostgreSQL, SQL Server, Oracle)


4. RDS Read Replicas for read scalability
    Up to 15 Read Replicas 
    Within AZ, Cross AZ or Cross Region 
    Replication is ASYNC, so reads are eventually consistent
    Replicas can be promoted to their own DB 
    Applications must update the connection string to leverage read replicas 


5. RDS Read Replicas - Use Cases 
    You have a production database taht is taking on normal load 
    You want to run a reporting application to run some analytics 
    You create a Read Replica to run the new workload there 
    The production application is unaffected 
    Read replicas are used for SELECT(=read) only kind of statements (not INSERT, UPDATE, DELETE)

    *** Network Cost
        In AWS there's a network cost when data goes from one AZ to another 
        For RDS Read Replicas within the same region, you don't pay that fee 
            Same Region / Different AZ 
                us-east-1a / us-east-1b
                    Same Region : Free 
            Different Region / AZ 
                us-east-1a / eu-west-1b 
                    Cross-Region : $$$

        
6. RDS Multi AZ (Disaster Recovery)
    SYNC replication 
    One DNS name - automatic app failover to standby 
    Increase availability
    Failover in case of loss of AZ, loss of network, instacne or storage failure 
    No manual intervention in apps 
    Not used for scaling 
    Note : The Read Replicas be setup as Multi AZ for Disater Recovery (DR)
    ** 재해 복구 등 Failover 발생을 대비하여 읽기 전용 Replciation을 다중 AZ로 설정할 수 있는가 ? YES

    From Single-AZ to Multi-AZ
        Zero downtime operation (no need to stop the DB)
        Just click on "modify" for the database 
        The following happens internally :
            A snapshot is taken 
            A new DB is restored from the snapshot in a new AZ 
            Synchronization is eatablished between the two databases 


7. RDS Custom
    Managed Oracle and Microsoft SQL Server Database with OS and database customization
    RDS: AUtomates setup, operation, and scaling of database in AWS 
    Custom: access to the underlying database and OS so you can 
        Configure settings
        Install patches
        Enable native features
        Access the underlying EC2 Instance using SSH or SSM Session Manager 
    De-activate Automation Mode to perform your customization, better to take a DB snapshot before 
    RDS vs RDS Custom
        RDS : entire database and the OS to be managed by AWS 
        RDS Custom : full admin access to the underlying OS and the database (only Oracle, Microsoft SQL Server)


8. Amazon Aurora 
    Aurora is a proprietary technology from AWS (not opern sourced)
    Postgres and MySQL are both supported as Aurora DB (that means your drivers will work as if Aurora was a Postgres or MySQL database)
    Aurora is "AWS cloud optimized" and claims 5x performance improvement over MySQL on RDS, over 3x the performance of Postgres on RDS 
    Aurora storage automatically grows in increments of 10 GB, up to 128 TB 
    Aurora can have 15 replicas while MySQL has 5, and the replication process is faster (sub 10 ms replica lag)
    Failover in Aurora is instantaneous. It's HA native 
    Aurora costs more than RDS (20% more) - but is more efficient (for Scaling)


9. Aurora High Availability and Read Scaling 
    6 copies of your data across 3 AZ :
        4 copies out of 6 needed for writes 
        3 copies out of 6 need for reads 
        Self healing with peer-to-peer replication 
        Storage is striped across 100s of volumes 
    One Aurora Instance takes writes (master)
    Automated failover for master in less than 30 seconds 
    Master + up to 15 Aurora Read Replicas serve reads 
    Support for Cross Region Replication 


10. Aurora DB Cluster 
    client -> Writer Endpoint (Pointing to the master) -> Shared storage Volume, Auto Expanding from 10 GB to 128 TB
                                                                    -> Reader Endpoint (Connection Load Balancing) Auto Scaling -> client 


11. Features of Aurora 
    Automatic fail-over
    Backup and Recovery 
    Isolation and security 
    Industry compliance 
    Push-button scaling 
    Automated Patching with Zero Downtime 
    Advanced Monitoring 
    Routine Maintenance
    Backtrack: restore data at any point of time without using backups 


12. Aurora Replicas
    Auto Scaling 
        Reader Endpoint Auto Scaling ~
    Custom Endpoints 
        Define a subset of Aurora Instances as a Custom Endpoint 
        Example: Run analytical queries on specific replicas
        Redaer Endpoint -> db.r3.large and db.r5.2xlarge
                                        -> db.r5.2xlarge -> "Custom Endpoint"
    Serverless 
        Automated database instantiation and auto-scaling based on actual usage 
        Good for infrequent, intermittent or unpredictable workloads 
        No capacity planning needed 
        Pay per second, can be more cost-effective 
        Clinet -> Proxy Fleet (managed by Aurora) -> Aamazon Aurora 생성
            즉, Proxy Fleet이 요청 받은 사이즈만큼 Instance를 생성
    Global Aurora 
        Aurora Cross Region Read Replicas :
            Useful for diaster recovery
            Simple to put in place 
        Aurora Global Database (recommended) :
            1 primary Region (read / write)
            Up to 5 secondary (read-only) regions, replication lag is less than 1 second 
            Up to 16 Read Replicas per secondary region 
            Helps for decreasing latency 
            Promoting another region (for diaster recovery) has an RTO of < 1 minute 
            ***** Typical cross-region replication takes less than 1 second
    Aurora Machine Learning 
        Enables you to add ML-based predictions to your applications via SQL 
        Simple, optimized, and secure integration between Aurora and AWS ML services
        Supported services 
            Amazon SageMaker (use with any ML model)
            Amazon Comprehend (for sentiment analysis)
        You don't need to have ML experience 
        Use cases : fraud detection, ads targeting, sentiment analysis, production recomendations


13. Backups 
    RDS Backups
        Automated backups :
            Daily full backup of the database (during the backup window)
            Transaction logs are backed-up by RDS every 5 minutes 
                => ability to restore to any point in time (from oldest backup to 5 minutes ago)
            1 to 35 days of retention, set 0 to disable automated bakcups 
        Manual DB Snapshots 
            Manually triggered by the user 
            Retention of backup for as long as you want 
        *** Trick: in a stopped RDS database, you will still pay for storage. 
            If you plan on stopping it for a long time, you should snapshot & restore instread 

    Aurora Backups 
        Automated backups 
            1 to 35 days (cannot be disabled)
            point-in-time recovery in that timeframe 
        Manual DB Snapshots 
            Manually triggered by the user 
            Retention of backup for as long as you want 
    
    * Aurora Backups and RDS Backups are quite simillar

    RDS & Aurora Restore options 
        Restoring a RDS/Aurora backup or a snapshot creates a new database 
        Restoring MySQL RDS database from S3
            Create a backup of your on-premises databases
            Store it on Amazon S3 (object storage)
            Restore the backup file onto a new RDS instance running MySQL
        Restoring MySQL Aurora cluster from S3 
            Create a backup of your on-premises database using Percona XtraBackup
            Store the backup file on Amazon S3 
            Restore the backup file onto a new Aurora cluster running MySQL 

    Aurora Database Cloning
        Create a new Aurora DB Cluster from an existing one 
        Faster than snapshot & restore 
        Uses copy-on-write protocol 
            Initially, the new DB cluster uses the same data volume as the original DB cluster (fast and efficient - no copying is needed)
            When updates are made to the new DB cluster data, then additional storage is allocated and data is copied to be separated
        Very fast & cost-effective 
        Useful to create a "staging" database from a "production" database without impacting the production database 


14. RDS & Aurora Security 
    At-rest encryption :
        Database master & replicas encryption using AWS KMS - must be defined as launch time 
        If the amster is not encrypted, the read replicas cannot be encrypted 
        To encrypt an un-encrypted database, go through a DB snapshot & restore as encrypted 
    In-flight encryption : TLS-ready by default, use the AWS TLS root certificates client-side 
    IAM Authentication : IAM roles to connect to your database (instread of username/pw)
    Security Groups : Control Network acess to your RDS/Aurora DB 
    No SSH available except on RDS Custom 
    Audit Logs can be enabled and sent to CloudWatch Logs for longer retention 


15. Amazon RDS Proxy 
    Fully managed database proxy for RDS 
    Allows apps to pool and share DB connections established with the database 
    * Improving database efficiency by reducing the stress on database resources (e.g., CPU, RAM) and minimize open connections (and timeouts)
    Serverless, autoscaling, highly available (multi-AZ)
    * Reduced RDS & Aurora failover time by up 66%
    Supports RDS (MySQL, PostgreSQL, MariaDB) and Aurora (MySQL, PostgreSQL)
    No code changes required for most apps 
    * Enforce IAM Authentication for DB, and securely store credentials in AWS Secrets Manager 
    * RDS Proxy is never publicly accessible (must be accessed from VPC)

    
16. Amazon ElastiCache 
    Overview 
        The same way RDS is to get managed Relational Databases ..
        ElastiCache is to get managed Redis or Memcached 
        Caches are in-memory databases with really high performance, low latency 
        Helps reduce load off of databases for read intensive workloads 
        Helps make your application stateless 
        AWS takes care of OS maintenance / patching, optimizations, setup, configuration, monitoring, failure recovery and backups 
        * Using ElastiCache involves heavy application code changes

    ElastiCache Solution Architecture
        DB Cache 
            Applications queries ElastiCache, if not available, get from RDS and store in ElastiCache
            Helps relieve load in RDS 
            Cache must have an invalidation strategy to make sure only the most current data is used in there 
        User Session Store 
            User logs into any of the application 
            The application writes the session data into ElastiCache
            The user hits another instance of our application 
            The instance retrieves the data and the user is already logged in 

    ElastiCache - Redis vs Memcached 
        REDIS                                                                   MEMCACHED
            Multi AZ with Auto-Failover                                             Multi-node for partitioning of data (sharding)
            Read Replicas to scale reads and have high availability                 NO high availability (replication)
            Data Durability using AOF persistence                                   Non persistent
            Backup and restore features                                             No backup and restore
            Supports Sets and Sorted Sets                                           Multi-threaded architecture 
        - Replication                                                           - sharding 
        고가용성, 백업, 읽기복제본을 위해 존재                                           분산되어 있는 순수한 캐시, 데이터가 손실되어도 OK, 고가용성 없고, 백업/복원도 없음

    Cache Security 
        ElastiCache supports IAM Authentication for Redis 
        IAM policies on ElastiCache are only used for AWS API-level security 
        Redis AUTH 
            You can set a "password/token" when you create a Redis cluster 
            This is an extra level of security for your cache (on top of security groups)
            Support SSL in flight encryption 
        Memcached 
            Supports SASL-based authentication (advanced)
    
    Patterns for ElastiCache
        Lazy Loading :
            all the read data is cached, data can become stale in cache 
        Write Through :
            Adds or update data in the cache when written to a DB (no stale data)
        Session Store :
            store temporary session data in a cache (using TTL features)
        
    Redis Use Case 
        Gaming Leaderboards are computationally complex 
        Redis Sorted sets guarantee both uniqueness and element ordering 
        Each time a new element added, it's ranked in real time, then added in correct order 

    

