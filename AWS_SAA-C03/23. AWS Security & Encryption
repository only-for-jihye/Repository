
Why encryption ?
    Encryption in flight (TLS / SSL)
        Data is encrypted before sending and decrypted after receiving 
        TLS certificates help with encryption (HTTPS)
        Encryption in flight ensures no MITM (man in the middel attack) can happen 
    Server-side encryption at rest 
        Data is encrypted after being received by the server 
        Data is decrypted before being sent 
        It is stored in an encrypted from thanks to a key (usually a data key)
        The encryption / decryption keys must be managed somewhere, and the server must have access to it 
    Client-side encryption 
        Data is encrypted by the client and never decrypted by the server 
        Data will be decrypted by a receiving client 
        The server should not be able to decrypt the data 
        Could leverage Envelope Encryption 
    

1. AWS KMS (Key Management Service)
    Anytime you hear "encryption" for an AWS service, it's most likely KMS 
    AWS manages encryption keys for us 
    Fully integrated with IAM for authorization 
    Easy way to control access to your data 
    Able to audit KMS Key usage using CloudTrail 
    Seamlessly integrated into most AWS services (EBS, S3, RDS, SSM, ...)
    "Never ever store your secrets in plaintext, especially in your code"
        KMS Key Encryption also available through API calls (SDK, CLI)
        Encrypted secrets can be stored in the code / environment variables 
    
    KMS Keys Types 
        KMS Keys is the new name of KMS Customer Master Key 
        Symmetric (AES-256 keys)
            Single encryption key that is used to Encrypt and Decrypt 
            AWS services that are integrated with KMS use Symmetric CMKs 
            You never get access to the KMS Key unencrypted (ust call KMS API to use)
        Asymmetric (RSA & ECC key pairs)
            Public (Encrypt) and Private Key (Decrypt) pair 
            Used for Encrypt/Decrypt, or Sign/Verify operations 
            The public key is downloadable, but you can't access the Private Key unencrypted
            Use case : encryption outside of AWS by users who can't call the KMS API 
        
    AWS KMS (Key Management Service)
        Types of KMS Keys :
            AWS Owned Keys (free) : SSE-S3, SSE-SQS, SSE-DDB (default key)
            AWS Managed Key : free (aws/service-name, example: aws/rds or aws/ebs)
            Customer managed keys created in KMS : $1/month 
            Customer managed keys imported (must be symmetric key) : $1/month 
            + pay for API call to KMS ($0.03 / 10000 calls)
        Automatic Key rotation :
            AWS-managed KMS Key : automatic every 1 year 
            Customer-managed KMS Key : (must be enabled) automatic every 1 year 
            Imported KMS Key only manual rotation possible using alias 
    
    Copying Snapshots across regions 
        Region eu-west-2                                                                                                              Region ap-southeast-2
        EBS Volume Encrypted With KMS (KMS Key A) -> EBS Snapshots Encrypted With KMS (KMS Key A) --KMS ReEncrypted with KMS Key B--> EBS Snapshots Encrypted With KMS (KMS Key B) -> EBS Volume Encrypted With KMS (KMS Key B)

    KMS Key Policies 
        Control access to KMS keys, "similar" to S3 bucket policies 
        Difference : you cannot control access without them 
        Default KMS Key Policy :
            Created if you don't provide a specific KMS Key Policy 
            Complete access to the key to the root user = entire AWS account 
        Custom KMS Key Policy :
            Define users, roles that can access the KMS Key 
            Define who can administer the key 
            Useful for cross-account access of your KMS key 
    
    Copying Snapshots across accounts 
        1) Create a Snapshot, encrypted with your own KMS Key (Customer Managed Key)
        2) "Attach a KMS Key Policy to authorize cross-account access"
        3) Share the encrypted snapshot 
        4) (in target) Create a copy of the Snapshot, encrypt it with a CMK in your account 
        5) Create a volume from the snapshot


2. KMS Multi-Region Keys 
    Identical KMS keys in different AWS Regions that can be used interchangeably 
    Multi-Region keys have the same key ID, key material, automatic rotation ...
    Encrypt in one Region and decrypt in other Regions 
    No need to re-encrypt or making cross-Region API calls 
    KMS Multi-Region are NOT global (Primary + Replicas)
    Each Multi-Region key is managed independently
    Use cases : global client-side encryption, encryption on Global DynamoDB, Global Aurora 

    DynamoDB Global Tables and KMS Multi-Region Keys Client-Side encryption 
        We can encrypt specific attributes client-side in our DynamoDB table using the "Amazon DynamoDB Encryption Client "
        Combined with Global Tables, the client-side encrypted data is replicated to other regions 
        If we use a multi-region key, replicated in the same region as the DynamoDB Global table, then client in these regions can use low-latency API calls to KMS in their region to decrypt the data client-side 
        Using client-side encryption we can protect specific fields and guarantee only decryption if the client has access to an API key 
    
    Global Aurora and KMS Multi-Region Keys Client-Side encryption
        We can encrypt specific attributes client-side in our Aurora table using the "AWS Encryption SDK"
        Combined with Aurora Global Tables, the client-side encrypted data is replicated to other regions 
        If we use a multi-region key, replicated in the same region as the Global Aurora DB, then client in these regions can use low-latency API calls to KMS in their region to decrypt the data client-side 
        Using client-side encryption we can protect specific fields and guarantee only decryption if the client has access to an API key, "we can protect specific fields even from database admins"


3. S3 Replication - Encryption Considerations 
    Unencrypted objects and objects encrypted with SSE-S3 are replicated by default 
    Objects encrypted with SSE-C (customer provided key) can be replicated 
    "For objects encrypted with SSE-KMS", you need to enable the option 
        Specify which KMS Key to encrypt the objects within the target bucket 
        Adapt the KMS Key Policy for the target key 
        An IAM Role with kms:Decrypt for the source KMS Key and kms:Encrypt for the target KMS Key 
        You might get KMS throttling errors, in which case you can ask for a Service Quotas increase 
    "You can use multi-region AWS KMS Keys, but they are currently treated as independent keys by Amazon S3 (the object will still be decrypted and then encrypted)"


4. AMI Sharing Process Encrypted via KMS 
    1) AMI in Source Account is encrypted with KMS Key from Source Account 
    2) Must modify the image attribute to add a "Launch Permission" which corresponds to the specified target AWS account 
    3) Must share the KMS Keys used to encrypted the snapshot the AMI references with the target account / IAM Role 
    4) The IAM Role/User in the target account must have the permissions to DescribeKey, ReEncrypted, CreateGrant, Decrypt 
    5) When launching an EC2 instance from the AMI, optionally the target account can specify a new KMS key in its own account to re-encrypt the volumes 


5. SSM Parameter Store 
    Secure storage for configuration and secrets 
    Optional Seamless Encryption using KMS 
    Serverless, scalable, durable, easy SDK 
    Version tracking of configurations / secrets 
    Security through IAM 
    Notifications with Amazon EventBridge 
    Integration with CloudFormation

    SSM Parameter Store Hierarchy
        /my-department/
            my-app/
                dev/
                    db-url                  <- GetParameters or             Dev Lambda Function
                    db-password             <- GetParametersByPath API      Prod Lambda Function
            other-app/
        /other-department/
        /aws/reference/secretsmanager/secret_ID_in_Secrets_Manager
        /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 (public)

    Standard and advanced parameter tiers 
        Total number of parameters                      Standard                Advanced
            allowed (per AWS account and Region)        10,000                  100,000
        Maximum size of a parameter value               4 KB                    8 KB
        Parameter policies available                    No                      Yes 
        Cost                                            No additional charge    Charges apply 
        Storage Pricing                                 Free                    $0.05 per advanced parameter per month 

    Parameters Policies (for advanced parameters)
        Allow to assign a TTL to a parameter (expiration date) to force updating or deleting sensitive data such as passwords 
        Can assign multiple policies at a time 
            Expiration (to delete a parameter), ExpirationNotification (EventBridge), NoChangeNotification (EventBridge)

    -> AWS Lambda에서 Parameter Store에 접근하려면 IAM 정책이 필요하다.
        -> Lambda 기본 정책 + getParameter 정책 + "KMS 정책(Decrypt, 복호화 하려면 필요함)"
                                                        -> KMS에는 ARN을 입력해주어야 한다.
            -> 따라서... 보안 효과 높다.


6. AWS Secrets Manager 
    Newer service, meant for storing secrets 
    Capability to force "rotation of secrets" every X days
    Automate generation of secrets on rotation (uses Lambda)
    Integration with "Amazon RDS" (MySQL, PostgreSQL, Aurora)
    Secrets are encrypted using KMS 
    Mostly meant for RDS integration 

    AWS Secrets Manager - Multi-Region Secrets 
        Replicate Secrets across multiple AWS Regions 
        Secrets Manager keeps read replicas in sync with the primary Secret 
        Ability to promote a read replica Secret to a standalone Secret 
        Use cases : multi-region apps, disaster recovery strategies, multi-region DB ...


7. AWS Certificate Manager (ACM)
    Easily provision, manage, and deploy "TLS Cetificates"
    Provide in-flight encryption for websites (HTTPS)
    Supports both public and private TLS certificates
    Free of charge for public TLS certificates 
    Automatic TLS certificate renewal 
    Integrations with (load TLS certificates on)
        Elastic Load Balancers (CLB, ALB, NLB)
        CloudFront Distributions
        APIs on API Gateway 
    Cannot use ACM with EC2 (can't be extracted)

    ACM - Requesting Public Certificates 
        1) List domain names to be included in the certificate 
            Fully Qualified Domain Name (FQDN) : corp.example.com 
            Wildcard Domain : *.example.com 
        2) Select Validation Method : DNS Validation or Email validation 
            DNS Validation is preferred for automation purposes 
            Email Validation will send emails to contact addresses in the WHOIS database 
            DNS Validation will leverage a CNAME record to DNS config (ex: Route 53)
        3) It will take a few hours to get verified 
        4) The Public Certificate will be enrolled for automatic renewal 
            ACM automatically renews ACM-generated certificates 60 days before expiry 

    ACM - Importing Public Certificates 
        Option to generate the certificate outside of ACM and then import it 
        "No automatic renewal", must import a new certificate before expiry 
        "ACM sends daily expiration events" starting 45 days prior to expiration 
            The # of days can be configured
            Events are appearing in EventBridge
        "AWS Config" has a managed rule named acm-certificate-expiration-check to check for expiring certificates (configurable number of days)
    
    ACM - Integration with ALB 
        User       --HTTP-->            Application Load Balancer
             <--Redirect to HTTPS       With HTTP -> HTTPS redirect rule        -> Auto Scaling Group (EC2 Instances)
                   --HTTPS-->               
                                                <--provision and maintain TLS certs--> AWS Certificate Manager 

    ACM - Integration with API Gateway 
        Endpoint Types 
            Edge-Optimized (default) : For global clients 
                Requests are routed through the CloudFront Edge locations (improves latency)
                The API Gateway still lives in only one region 
            Regional :
                For clients within the same region 
                Could manually combine with CloudFront (more control over the caching strategies and the distribution)
            Private :
                Can only be accessed from your VPC using an interface VPC endpoint (ENI)
                Use a resource policy to define access 
        ACM은 Edge-Optimized와 Regional에 적합하다.

        Create a "Custom Domain Name" in API Gateway 
        "Edge-Optimized (default)" : For global clients 
            Requests are routed through the CloudFront Edge locations (improves latency)
            The API Gateway still lives in only one region 
            "The TLS Certificate must be in the same region as CloudFront, in us-east-1"
            Then setup CNAME or (better) A-Alias record in Route 53
        "Regional" :
            For clients within the same region 
            "The TLS Certificate must be imported on API Gateway, in the same region as the API Stage"
            Then setup CNAME or (better) A-Alias record in Route 53 
    

8. AWS WAF - Web Application Firewall
    Protects your web applications from common web exploits (Layer 7)
    "Layer 7 is HTTP" (vs Layer 4 is TCP/UDP)

    ** Deploy on
        Application Load Balancer 
        API Gateway 
        CloudFront 
        AppSync GraphQL API 
        Cognito User Pool 
    
    Define Web ACL (Web Access Control List) Rules :
        "IP Set : up to 10,000 IP addresses" - use multiple Rules for more IPs 
        HTTP headers, HTTP body, or URI strings Protects from common attack - "SQL injection" and "Cross-Site Scripting (XSS)"
        Size constraints, "geo-match (block countries)"
        "Rate-based rules" (to count occurrences of events) - "for DDoS protection"
    
    Web ACL are Regional except for CloudFront 
    A rule group is "a reusable set of rules that you can add to a web ACL"

    WAF - Fixed IP while using WAF with a Load Balancer 
        WAF does not support the Network Load Balancer (Layer 4)
        We can use Global Accelerator for fixed IP and WAF on the ALB 



