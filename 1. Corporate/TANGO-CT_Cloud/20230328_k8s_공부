# 2023.03.28

k8s 교육은 아니고... 정리해서 같이 공부하기...
reference : https://kubernetes.io/ko/, https://kubernetes.io/ko/docs/home/

prefix...
 - 왜 클라우드인가? container ? docker ? k8s ?

0. Docker

----
----
----
----
----
----   image1
      ----tangooc계정추가 build  
      완료
    -----tangosvc 

docker image -> container를 올린것뿐

1. container
    - VM/Container
        VM : ON-Premise 환경
        Container : Cloud 환경
            bastion (EC2 Instance)   ->  Worker Node
            ----master               ->  worker

    - manifest : *.yaml (base 파일들)
    - k8s : 컨테이너 오케스트레이션 툴 (컨테이너 자동화 도구)
    - helmChart 사용 이유
        kubectl apply -f RAN-EMS0001_PM.yaml
        kubectl apply -f RAN-EMS0002_PM.yaml ... ran-ems 84대 *yaml 파일을 84개를 만들어야함
        -> manifest 파일에 parameter로 넘겨줘서 재사용 가능하게

2. pod -> pod안에 container를 올려요
    workload : 같은 종류의 pod를 묶은 것
        pod
    - ReplicaSet
        - Stateful과 Stateless
            ss-ran-pm-0 : RAN-EMS#205 PSM0
            ss-ran-pm-1 : RAN-EMS#205 PSM1

            - Deployment
                - HPA (Horizontal Pod Autoscaling)
                    - Scale 개념
                        - Scale Up : 리소스 높임 -> 비용 증가
                        - Scale Out : 병렬 처리, 장비 수를 늘림 -> 상대적 비용 감소, 확장의 유연성
                    - HPA에서는 ..
                        - Scale Up : pod 수를 늘림
                        - Scale Down : pod 수를 줄임
            - Statefulset
    - Job
        - Cronjob
    - init-container
    - container
    - MultiContainer == sideCar container
    * Resource ?
        서버 스펙 : 48~64core 서버들이 140몇대 -> 10대 미만
        -> k8s 각각 container (프로세스) 마다 resource "각각.." 적용할 수 있음
            request : container가 기동하기 위한 최소 단위
            limit : container가 최대치 얼마까지 사용하는지 제한
        CPU 1core = 1000m,  Memory 1024MB -> 1024Mi
            OC 프로세스 중에서 100m request, 200m limit => 0.1 core
    * LifeCycle
    - Probe
        - Livenessprobe
        - Readinessprobe
        - exitCode 1 error, 0 success
            - exec
            - grpc
            - httpGet
            - tcpSocket

3. service
    - ClusterIP
    - NodePort
    
    - Load Balancer
    - External Name

4. storage
    - PV (EFS)
        - EBS, EFS
    - PVC
    - StorageClass
    - emptyDir

5. config
    - configMap
    - Secret

6. Bastion
    - bastion 서버의 역할
    - RT Nodegroup
    - NRT Nodegroup

7. Monitoring
    - kubectl get event
    - kubectl describe/get po/svc/{name} -n ns-tgo-oc
    - kubectl get po {name} -o yaml 
    - kubectl get nodes --show-labels
    - DataDog

8. CI/CD
    - CI : AWS Console
    - CD : ArgoCD




